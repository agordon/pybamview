#!/usr/local/bin/python
import argparse
from pybamview import *
from flask import Flask, request, send_from_directory, render_template, url_for
import os
import re
import sys

PREFIX = "/usr/local/pybamview/" # TODO this should probably not be hardcoded
app = Flask(__name__, static_folder="%s/"%PREFIX, \
                static_path="%s/"%PREFIX,\
                template_folder="%s/templates/"%PREFIX)
app.debug = True

BAMDIR = "."
REFFILE = ""
PORT = 5000
NUMCHAR = 500
HOST = "127.0.0.1"
BAMFILE_TO_BAMVIEW = {}
SETTINGS = {}

NUC_TO_COLOR = {
    "A": "red",
    'a': "red",
    "C": "blue",
    "c": "blue",
    "G": "green",
    "g": "green",
    "T": "orange",
    "t": "orange",
    "N": "white",
    "n": "white",
    "-": "white",
    ".": "gray",
}

# Apparently all applications should have an icon
@app.route('/favicon.ico')
def favicon():
    return send_from_directory('/usr/local/pybamview/static/',
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route("/")
def listbams(methods=['POST','GET']):
    bamfiles = request.args.getlist("bamfiles")
    if len(bamfiles) > 0:
        return display_bam(bamfiles)
    files = os.listdir(BAMDIR)
    bamfiles = [f for f in files if re.match(".*.bam$", f) is not None]
    bamfiles = [f for f in bamfiles if f+".bai" in files]
    return render_template("index.html", bamfiles=bamfiles, title="PyBamView - %s"%BAMDIR)

@app.route('/<string:bamfiles>', methods=['POST', 'GET'])
def display_bam(bamfiles):
    if type(bamfiles) != list:
        bamfiles = [bamfiles]
    region = request.args.get("region","")
    region.replace("%3A",":")
    return display_bam_region(bamfiles, region)

@app.route('/test/<string:bamfiles>')
def display_bam_region(bamfiles, region):
    if type(bamfiles) != list: bamfiles = [bamfiles]
    if ";".join(bamfiles) not in BAMFILE_TO_BAMVIEW:
        bv = BamView(["%s/%s"%(BAMDIR, bam) for bam in bamfiles], REFFILE)
        BAMFILE_TO_BAMVIEW[";".join(bamfiles)] = bv
    else: bv = BAMFILE_TO_BAMVIEW[";".join(bamfiles)]
    try:
        chrom, pos = region.split(":")
        pos = int(pos)
    except: 
        try:
            chrom, pos = sorted(bv.reference.keys())[0], 0
        except: chrom, pos = "None", 0
    bv.LoadAlignmentGrid(chrom, pos, _settings=SETTINGS)
    positions = bv.GetPositions(pos)
    region = "%s:%s"%(chrom, pos)
    return render_template("bamview.html", title="PyBamView - %s"%region, BAM_FILES=bamfiles,\
                               REF_FILE=REFFILE, REGION=region, SAMPLES=list(set(bv.read_groups.values())),\
                               REFERENCE=bv.GetReferenceTrack(pos), ALIGNMENTS=bv.GetAlignmentTrack(pos),\
                               POSITIONS=positions, NUC_TO_COLOR=NUC_TO_COLOR, CHROM=chrom)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='pybamview: An Python-based BAM alignment viewer.')
    parser.add_argument('--bamdir', help='Directory to look for bam files. Bam files must be indexed.')
    parser.add_argument('--ref', help='Path to reference fasta file. If no reference is given, the reference track is displayed as "N"\'s')
    parser.add_argument('--ip', help='Host IP. 127.0.0.1 for local host (default). 0.0.0.0 to have the server available externally.')
    parser.add_argument('--port', help='The port of the webserver. Defaults to 5000.')
    parser.add_argument('--buffer', help='How many nucleotides to load into memory. Default: 500. Buffering more allows you to scroll farther. Buffering less is faster.')
    args = parser.parse_args()
    if args.bamdir is not None:
        BAMDIR = args.bamdir
    if args.ref is not None:
        REFFILE = args.ref
    if args.port is not None:
        PORT = int(args.port)
    if args.ip is not None:
        HOST = args.ip
    if args.buffer is not None:
        NUMCHAR = int(args.buffer)
    SETTINGS["NUMCHAR"] = NUMCHAR
    app.run(port=PORT, host=HOST)
