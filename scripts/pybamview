#!/usr/local/bin/python
"""
The MIT License (MIT)

Copyright (c) 2014 Melissa Gymrek <mgymrek@mit.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import argparse
import pybamview
import pyfasta
from flask import Flask, request, send_from_directory, render_template, url_for
import os
from os.path import join
import re
import sys

SPREFIX = join(pybamview.__path__[0].split("/lib/")[0],
               "pybamview")
app = Flask(__name__, static_folder="%s/"%SPREFIX, \
                static_path="%s/"%SPREFIX,\
                template_folder=join(SPREFIX, "templates"))
app.debug = True

BAMDIR = "."
REFFILE = ""
PORT = 5000
NUMCHAR = 500
HOST = "127.0.0.1"
BAMFILE_TO_BAMVIEW = {}
SETTINGS = {}

NUC_TO_COLOR = {
    "A": "red",
    'a': "red",
    "C": "blue",
    "c": "blue",
    "G": "green",
    "g": "green",
    "T": "orange",
    "t": "orange",
    "N": "white",
    "n": "white",
    "-": "white",
    ".": "gray",
}

def isnuc(x):
    return str(x).upper() in ["A","C","G","T"]

# Apparently all applications should have an icon
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(join(SPREFIX, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route("/")
def listbams(methods=['POST','GET']):
    bamfiles = request.args.getlist("bamfiles")
    if len(bamfiles) > 0:
        return display_bam(bamfiles)
    try:
        files = os.listdir(BAMDIR)
    except OSError: files = []
    bamfiles = [f for f in files if re.match(".*.bam$", f) is not None]
    bamfiles = [f for f in bamfiles if f+".bai" in files]
    return render_template("index.html", bamfiles=bamfiles, title="PyBamView - %s"%BAMDIR)

@app.route('/<string:bamfiles>', methods=['POST', 'GET'])
def display_bam(bamfiles):
    if type(bamfiles) != list:
        bamfiles = [bamfiles]
    region = request.args.get("region","")
    region.replace("%3A",":")
    return display_bam_region(bamfiles, region)

@app.route('/test/<string:bamfiles>')
def display_bam_region(bamfiles, region):
    if type(bamfiles) != list: bamfiles = [bamfiles]
    for bam in bamfiles:
        if not os.path.exists(join(BAMDIR,bam)):
            sys.stderr.write("WARNING: bam file %s does not exist.\n"%join(BAMDIR, bam))
    if ";".join(bamfiles) not in BAMFILE_TO_BAMVIEW:
        bv = pybamview.BamView([join(BAMDIR, bam) for bam in bamfiles], REFFILE)
        BAMFILE_TO_BAMVIEW[";".join(bamfiles)] = bv
    else: bv = BAMFILE_TO_BAMVIEW[";".join(bamfiles)]
    try:
        chrom, pos = region.split(":")
        pos = int(pos)
    except: 
        try:
            chrom, pos = sorted(bv.reference.keys())[0], 0
        except: chrom, pos = "None", 0
    bv.LoadAlignmentGrid(chrom, pos, _settings=SETTINGS)
    positions = bv.GetPositions(pos)
    region = "%s:%s"%(chrom, pos)
    return render_template("bamview.html", title="PyBamView - %s"%region, BAM_FILES=bamfiles,\
                               REF_FILE=REFFILE, REGION=region, SAMPLES=list(set(bv.read_groups.values())),\
                               REFERENCE=bv.GetReferenceTrack(pos), ALIGNMENTS=bv.GetAlignmentTrack(pos),\
                               POSITIONS=positions, NUC_TO_COLOR=NUC_TO_COLOR, CHROM=chrom)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='pybamview: An Python-based BAM alignment viewer.')
    parser.add_argument('--bamdir', help='Directory to look for bam files. Bam files must be indexed.')
    parser.add_argument('--ref', help='Path to reference fasta file. If no reference is given, the reference track is displayed as "N"\'s')
    parser.add_argument('--ip', help='Host IP. 127.0.0.1 for local host (default). 0.0.0.0 to have the server available externally.')
    parser.add_argument('--port', help='The port of the webserver. Defaults to 5000.')
    parser.add_argument('--buffer', help='How many nucleotides to load into memory. Default: 500. Buffering more allows you to scroll farther. Buffering less is faster.')
    args = parser.parse_args()
    if args.bamdir is not None:
        BAMDIR = args.bamdir
    if args.ref is not None:
        REFFILE = args.ref
    if args.port is not None:
        PORT = int(args.port)
    if args.ip is not None:
        HOST = args.ip
    if args.buffer is not None:
        try:
            NUMCHAR = int(args.buffer)
        except:
            sys.stderr.write("ERROR: invalid argument to --buffer.\n")
            sys.exit(1)
    SETTINGS["NUMCHAR"] = NUMCHAR
    if not os.path.exists(REFFILE):
        REFFILE = "Could not find reference file %s"%REFFILE
    else:
        try:
            x = pyfasta.Fasta(REFFILE) # Make sure we can open the fasta file
        except: REFFILE = "Invalid fasta file %s"%REFFILE
    app.jinja_env.filters.update({'isnuc': isnuc})
    app.run(port=PORT, host=HOST)
